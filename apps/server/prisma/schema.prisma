// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String         @unique
  phone         String         @unique
  address       String
  refreshTokens RefreshToken[]
  role          Role           @relation(fields: [roleId], references: [id])
  roleId        Int
  Order         Order[]
  Purchase      Purchase[]
  cart          Cart?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt

  @@map("users")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  User      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("roles")
}

model OrderState {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Order     Order[]

  @@map("orderStates")
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Order {
  id    Int            @id @default(autoincrement())
  items OrderProduct[]

  tokenId       String? @unique
  transactionId String? @unique
  ready         Boolean @default(false)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  orderState   OrderState @relation(fields: [orderStateId], references: [id])
  orderStateId Int        @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("orders")
}

model PurchaseProduct {
  id         Int      @id @default(autoincrement())
  quantity   Int
  price      Float
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  purchaseId Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Purchase {
  id        Int               @id @default(autoincrement())
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  items     PurchaseProduct[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt

  @@map("purchases")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  ip        String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("refreshTokens")
}

model Image {
  id        Int      @id @default(autoincrement())
  path      String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("images")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String  @db.MediumText
  description String  @db.LongText
  price       Float
  quantity    Int
  isExclusive Boolean @default(false)

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int

  unit   Unit @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId Int

  images Image[]
  tags   Tag[]

  OrderProduct    OrderProduct[]
  PurchaseProduct PurchaseProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("products")
}

model Tag {
  id Int @id @default(autoincrement())

  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  @@map("tags")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  Product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  @@map("categories")
}

model Unit {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  Product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  @@map("units")
}

model Cart {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("carts")
}
